import { FSM } from "../src-core/fsm/FSM";
import { InteractionImpl } from "../src-core/interaction/InteractionImpl";
import { OutputState } from "../src-core/fsm/OutputState";
import { InteractionData } from "../src-core/interaction/InteractionData";
import { WidgetData } from "../src-core/interaction/WidgetData";
export declare abstract class TSInteraction<D extends InteractionData, F extends FSM<Event>, T> extends InteractionImpl<D, Event, F> implements WidgetData<T> {
    protected readonly _registeredNodes: Set<EventTarget>;
    protected _widget: T | undefined;
    private mouseHandler;
    private keyHandler;
    private uiHandler;
    private actionHandler;
    protected constructor(fsm: F);
    getWidget(): T | undefined;
    protected updateEventsRegistered(newState: OutputState<Event>, oldState: OutputState<Event>): void;
    private getEventTypesOf(state);
    registerToNodes(widgets: Array<EventTarget>): void;
    unregisterFromNodes(widgets: Array<EventTarget>): void;
    onNodeUnregistered(node: EventTarget): void;
    onNewNodeRegistered(node: EventTarget): void;
    private registerEventToNode(eventType, node);
    protected registerActionHandlerClick(node: EventTarget): void;
    protected unregisterActionHandlerClick(node: EventTarget): void;
    protected registerActionHandlerInput(node: EventTarget): void;
    protected unregisterActionHandlerInput(node: EventTarget): void;
    protected getActionHandler(): EventListener;
    reinitData(): void;
    private unregisterEventToNode(eventType, node);
    protected getMouseHandler(): (e: MouseEvent) => void;
    protected getKeyHandler(): (e: KeyboardEvent) => void;
    protected getUIHandler(): (e: UIEvent) => void;
    uninstall(): void;
}
