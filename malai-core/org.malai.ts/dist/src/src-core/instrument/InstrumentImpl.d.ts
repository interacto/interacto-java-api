import { WidgetBinding } from "../binding/WidgetBinding";
import { Instrument } from "./Instrument";
import { Undoable } from "../undo/Undoable";
import { MArray } from "../../util/ArrayUtil";
import { Command } from "../command/Command";
export declare abstract class InstrumentImpl<T extends WidgetBinding> implements Instrument<T> {
    protected activated: boolean;
    protected readonly bindings: MArray<T>;
    protected modified: boolean;
    protected constructor();
    getNbWidgetBindings(): number;
    hasWidgetBindings(): boolean;
    getWidgetBindings(): MArray<T>;
    abstract configureBindings(): void;
    addBinding(binding: T): void;
    removeBinding(binding: T): boolean;
    clearEvents(): void;
    isActivated(): boolean;
    setActivated(toBeActivated: boolean): void;
    interimFeedback(): void;
    isModified(): boolean;
    setModified(isModified: boolean): void;
    reinit(): void;
    onUndoableCleared(): void;
    onUndoableAdded(undoable: Undoable): void;
    onUndoableUndo(undoable: Undoable): void;
    onUndoableRedo(undoable: Undoable): void;
    onCmdAdded(cmd: Command): void;
    onCmdCancelled(cmd: Command): void;
    onCmdExecuted(cmd: Command): void;
    onCmdDone(cmd: Command): void;
}
