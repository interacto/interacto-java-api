import { State } from "./State";
import { InitState } from "./InitState";
import { ObsValue } from "../utils/ObsValue";
import { OutputState } from "./OutputState";
import { FSMHandler } from "./FSMHandler";
import { TimeoutTransition } from "./TimeoutTransition";
import { StdState } from "./StdState";
import { InputState } from "./InputState";
import { Logger } from "typescript-logging";
import { MArray } from "../../util/ArrayUtil";
export declare class FSM<E> {
    protected logger: Logger | undefined;
    protected _inner: boolean;
    protected _startingState: State<E>;
    protected started: boolean;
    readonly initState: InitState<E>;
    protected readonly _currentState: ObsValue<OutputState<E>>;
    protected readonly states: MArray<State<E>>;
    protected readonly handlers: MArray<FSMHandler>;
    protected readonly eventsToProcess: MArray<E>;
    protected currentTimeout: TimeoutTransition<E> | undefined;
    protected currentSubFSM: FSM<E> | undefined;
    constructor();
    setCurrentSubFSM(subFSM?: FSM<E>): void;
    currentState: OutputState<E>;
    inner: boolean;
    process(event: E): boolean;
    enterStdState(state: StdState<E>): void;
    isStarted(): boolean;
    protected processRemainingEvents(): void;
    addRemaningEventsToProcess(event: E): void;
    onTerminating(): void;
    onCancelling(): void;
    onStarting(): void;
    onUpdating(): void;
    addState(state: InputState<E>): void;
    log(log: boolean): void;
    reinit(): void;
    fullReinit(): void;
    onTimeout(): void;
    stopCurrentTimeout(): void;
    protected checkTimeoutTransition(): void;
    addHandler(handler: FSMHandler): void;
    removeHandler(handler: FSMHandler): void;
    protected notifyHandlerOnStart(): void;
    protected notifyHandlerOnUpdate(): void;
    notifyHandlerOnStop(): void;
    protected notifyHandlerOnCancel(): void;
    getStates(): Array<State<E>>;
    currentStateProp(): ObsValue<OutputState<E>>;
    startingState: State<E>;
    getEventsToProcess(): MArray<E>;
    uninstall(): void;
}
