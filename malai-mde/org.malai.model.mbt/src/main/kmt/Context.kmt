using kermeta::standard::*
using kermeta::io::StdIO => stdio
using org::malai::action::*
using org::malai::instrument::*

package org::malai::generator{

	/*
	 * Represents the runtime state
	 */
	class Context
	{		
	
		//Actions create by visited Links
		attribute resolvedActions : bag Action[0..*]
		
		//Instruments activated by visited Actions
		attribute activatedInstr : set Instrument[0..*]
		
		//PARAMETER
		attribute MAXVISITS : Integer
		
		
		/*
		 * Setup the context
		 */
		operation initialize( activInstr : Collection<Instrument>, resAction : Collection<Action> ) : Void is do
			MAXVISITS := 3
			resolvedActions.addAll(activInstr)
			activatedInstr.addAll(resAction)
		end
		
		/*
		 * Select the next Link to be visited
		 * If none return void
		 */
		operation nextLink() : Link is do
			//Get the less visited link (and visitable)
			var min : Link
			activatedInstr.each{instr | 
				instr.links.each{link | 
						if isVisitable(link) and link.visitCounter < MAXVISITS then
							if min == void then
								min := link
							else
								if link.visitCounter < min.visitCounter then
									min := link
								end
							end
						end
					}
				}
			result := min
		end
		
		/*
		 * Add an executed action in the current context
		 */
		operation addSolvedAvtion(act : Action) : Void is do
			resolvedActions.add(act)
		end
		
		/*
		 * Add a usable instrument 
		 */
		operation activateInstrument(instr : Instrument) : Void is do
			activatedInstr.add(instr)
		end		

		/*
		 * Remove an instrument
		 */ 
		operation inactivateInstrument(instr : Instrument) : Void is do
			activatedInstr.remove(instr)
		end
		
		/*
		 * Return true if all dependencies of the link are resolved
		 */
		operation isVisitable(link : Link) : Boolean is do
			result := link.action.dependencies.forAll{dep | resolvedActions.contains(dep.srcAction)} 
		end
	}
}